name: 自动打包发布程序

on:
  push:
    tags:
      - 'v*'  # 添加标签推送触发
  workflow_dispatch:
    inputs:
      version:
        description: '输入自定义版本号 (例如: 1.2.3)'
        required: false
        default: '0.1.2'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4


      - name: 安装requirements
        run: pip install nuitka

      - name: 并行打包
        run: |
          # 启动两个后台任务进行打包
          # --onefile
          Start-Job -ScriptBlock { nuitka --standalone --windows-icon-from-ico=img/TextGrid2oto.ico --output-filename=TextGrid2oto --assume-yes-for-downloads --output-dir=output main.py }
          Start-Job -ScriptBlock { nuitka --standalone --assume-yes-for-downloads --output-dir=output hira2roma.py }
          # 等待所有任务完成
          Get-Job | Wait-Job

      - name: 创建发布压缩包
        id: create_release  # 添加步骤ID用于后续引用
        shell: pwsh
        run: |
          # 处理版本号逻辑
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } elseif ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}".Replace("v", "")
          } else {
            $version = "Test"
          }
          # 通过 GitHub API 获取最新标签
          $headers = @{
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
          }
          $tagsUrl = "https://api.github.com/repos/xiaobaijunya/TextGrid2oto/tags"
          $tagsResponse = Invoke-RestMethod -Uri $tagsUrl -Headers $headers
          $latestTag = $tagsResponse[0].name -replace 'v', ''
          
          # 设置输出变量
          echo "version=$version" >> $env:GITHUB_OUTPUT
          # 删除所有py文件
          Get-ChildItem -Path D:\a\TextGrid2oto\TextGrid2oto\ -Filter *.py -Recurse | Remove-Item -Force

          # 删除空文件夹
          Get-ChildItem -Path D:\a\TextGrid2oto\TextGrid2oto\ -Directory -Recurse | Where-Object { (Get-ChildItem -Path $_.FullName | Measure-Object).Count -eq 0 } | Remove-Item -Force -Recurse

          # 把output文件里面的dll和exe复制到主目录
          $sourceDir = "D:\a\TextGrid2oto\TextGrid2oto\output"
          $destinationDir = "D:\a\TextGrid2oto\TextGrid2oto"
          Get-ChildItem -Path $sourceDir -Filter *.dll -Recurse | Copy-Item -Destination $destinationDir
          Get-ChildItem -Path $sourceDir -Filter *.exe -Recurse | Copy-Item -Destination $destinationDir

          # 删除output文件夹
          Remove-Item -Path $sourceDir -Force -Recurse
          
          # 删除 img、.idea 和 .github 文件夹
          $foldersToDelete = "D:\a\TextGrid2oto\TextGrid2oto\img", "D:\a\TextGrid2oto\TextGrid2oto\.idea", "D:\a\TextGrid2oto\TextGrid2oto\.github", "D:\a\TextGrid2oto\TextGrid2oto\requirements.txt","D:\a\TextGrid2oto\TextGrid2oto\.gitignore"
          foreach ($folder in $foldersToDelete) {
            if (Test-Path -Path $folder) {
              Remove-Item -Path $folder -Force -Recurse
            }
          }

          # 压缩主目录
          Compress-Archive -Path D:\a\TextGrid2oto\TextGrid2oto\* -DestinationPath D:\a\TextGrid2oto\TextGrid2oto\TextGrid2oto-$version-windows.zip
          ls D:\a\TextGrid2oto\TextGrid2oto\


      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ steps.create_release.outputs.version }}"  # 使用上一步的输出变量
          draft: false
          prerelease: false
          files: |
            TextGrid2oto-*-windows.zip
          body: |
            ## 版本 ${{ steps.create_release.outputs.version }} 更新内容
            查看 [更新细节](https://github.com/xiaobaijunya/TextGrid2oto/compare/v${{ steps.create_release.outputs.latestTag }}...v${{ steps.create_release.outputs.version }})

            ### 包含组件
            - TextGrid2oto (Windows x64)
            - hira2roma (Windows x64)
            ### 说明文件
            - README.md

        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}