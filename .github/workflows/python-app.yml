name: Auto Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.app }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        app: [main, hira2roma]
        include:
          - os: ubuntu-latest
            sys_name: linux
            arch: x86_64
          - os: macos-latest
            sys_name: macos
            arch: universal
          - os: windows-latest
            sys_name: windows
            arch: x64
          - app: main
            pkg_name: TextGrid2oto
          - app: hira2roma
            pkg_name: hira2roma

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc python3-dev

      - name: Install Nuitka
        run: pip install nuitka

      - name: Build executable
        shell: bash
        run: |
          # 提取版本号（去除v前缀）
          VERSION=${GITHUB_REF_NAME#v}
          
          # 定义输出文件名模板
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OUTPUT_FILE="${{ matrix.pkg_name }}-${VERSION}-${{ matrix.sys_name }}-${{ matrix.arch }}.exe"
          else
            OUTPUT_FILE="${{ matrix.pkg_name }}-${VERSION}-${{ matrix.sys_name }}-${{ matrix.arch }}"
          fi

          # 执行Nuitka打包
          python -m nuitka --standalone --onefile ${{ matrix.app }}.py
          
          # 重命名输出文件
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv ${{ matrix.app }}.exe "${OUTPUT_FILE}"
          else
            mv ${{ matrix.app }} "${OUTPUT_FILE}"
          fi

          # 显示生成文件信息
          ls -lh "${OUTPUT_FILE}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkg_name }}-${{ matrix.sys_name }}
          path: |
            ${{ matrix.pkg_name }}-*-${{ matrix.sys_name }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release_assets
          find artifacts -type f -exec cp -v {} release_assets \;
          ls -lh release_assets

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: "Release ${{ github.ref_name }}"
          body: "Auto-generated build for version ${{ github.ref_name }}"
          files: |
            release_assets/*
